#!/usr/bin/env python3
#
# extract <meta-data> elements from AndroidManifest.xml to look for
# API Key idenfiers and other interesting tidbits.
# https://github.com/Exodus-Privacy/etip/issues/62

import collections
import json
import os
import re
import sys
from bs4 import BeautifulSoup


class Encoder(json.JSONEncoder):
    dict_keys = type({}.keys())
    def default(self, obj):
        if isinstance(obj, set) or isinstance(obj, self.dict_keys):
            return sorted(obj)
        return super().default(obj)


META_DATA_REGEX = re.compile(r'<\s*meta-data\s+[^>]+>(?:.*?</meta-data>)', flags=re.DOTALL | re.MULTILINE)

output = dict()
output['errors'] = dict()
d = dict()
output['meta-data'] = d
attributes = set()
output['attributes'] = attributes
basedir = os.path.dirname(__file__)
datadir = os.path.join(basedir, 'apkparser-axml2xml')
outputdir = os.path.join(basedir, os.path.basename(__file__).replace('-run', ''))
os.makedirs(outputdir, exist_ok=True)
attributes_file = os.path.join(outputdir, 'attributes.json')
names_file = os.path.join(outputdir, 'names.json')
output_file = os.path.join(outputdir, 'meta-data.json')

print('Scanning', datadir)
i = 0
for root, dirs, files in os.walk(datadir):
    print(root)
    for f in files:
        path = os.path.join(root, f)
        with open(path) as fp:
            for meta_data in META_DATA_REGEX.findall(fp.read()):
                bs = BeautifulSoup(meta_data, 'lxml')
                item = bs.find('meta-data')
                attributes.update(item.attrs)
                line = ''
                if 'android:name' not in item.attrs.keys():
                    if f not in output['errors']:
                        output['errors'][f] = []
                    output['errors'][f].append(meta_data)
                    print('ERROR:', f, '<meta-data/> has no android:name:\n', meta_data)
                    continue
                name = item.attrs['android:name']
                if name not in d:
                    d[name] = dict()
                if 'apks' not in d[name]:
                    d[name]['apks'] = set()
                d[name]['apks'].add(path[len(basedir) + 20:-20])  # relative path and rstrip .AndroidManifest.xml
                if 'android:resource' in item.attrs:
                    if 'resources' not in d[name]:
                        d[name]['resources'] = set()
                    d[name]['resources'].add(item.attrs['android:resource'])
                if 'android:value' in item.attrs:
                    if 'values' not in d[name]:
                        d[name]['values'] = set()
                    d[name]['values'].add(item.attrs['android:value'])
    i += 1
    if i > 1000:
        i = 0
        with open(output_file, 'w') as fp:
            json.dump(output, fp, indent=2, sort_keys=True, cls=Encoder)
with open(output_file, 'w') as fp:
    json.dump(output, fp, indent=2, sort_keys=True, cls=Encoder)
with open(attributes_file, 'w') as fp:
    json.dump(sorted(attributes), fp, indent=2)
names = dict()
for k, v in d.items():
    names[k] = sorted(v['apks'])
with open(names_file, 'w') as fp:
    json.dump(names, fp, indent=2, sort_keys=True)
